### 1. Loading packages and functions and specifying working directory and parameters
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,viridis,future.apply,data.table)
PC <- 'denethor'
n <- 10000
penalty <- 'no'
ambition_cutoff <- 'no'
results_date <- '23-02-07'
if(PC=='work_laptop') {
setwd("C:/Users/Hadj/OneDrive - Deakin University/Michalis_Brett/Future_food_systems_review/")
} else if (PC =='analytix') {
setwd("M:/Current-Users/Michalis-Hadjikakou/Food_Meta_Analysis_Enayat/Notebook/")
} else {
setwd("//school-les-m.shares.deakin.edu.au/school-les-m/Planet-A/Food-Systems/Meta_analysis/GFSS-MM/Outputs/Pareto_analysis+plots/")
}
# If there is a penalty read the penalty file
if (penalty=='yes') {
All_scen <- fread(paste0("All_merged_scenarios_penalty_",results_date,".csv"))
}else{
All_scen <- fread(paste0("All_merged_scenarios_",results_date,".csv"))
}
# Risk cut-off parameters
threshold_high <- 0.5
threshold_CC_high <- 0.5
threshold_low <- 1/3
threshold_CC_low <- 0.40
perc_cut  <- c(1,0.5,0.25,0.1) # Choice of ambition percentile to consider
scaling_factor <- 10 # scales the low risk scenarios to ensure they are visible
# Plotting parameters
red_spectral <- RColorBrewer::brewer.pal(n = 11, name = "Spectral")[1]
blue_spectral <- RColorBrewer::brewer.pal(n = 11, name = "Spectral")[10]
boundaries <- c("Land-system change","Climate change","Freshwater use","Biogeochemical flows","All boundaries")
dp1 <- 1 # Number of decimal places
dp_string1 <- paste0("%0.",dp1,"f")
dp2 <- 2 # Number of decimal places
dp_string2 <- paste0("%0.",dp2,"f")
sel_cols <- c("Risk_Land_system_change","Risk_Climate_Change","Risk_Freshwater_Use","Risk_Biogeochemical_Flows")
df_table <- All_scen %>%
mutate(across(all_of(sel_cols), # Combinations that satisfy 0.5 risk for each boundary
~ case_when(
.<0.5 ~ "Low_risk",
TRUE ~ "High_risk"),
.names = "{col}_0.50")) %>%
mutate(across(all_of(sel_cols), # Combinations that satisfy 0.33 risk for each boundary
~ case_when(
.<1/3 ~ "Low_risk",
TRUE ~ "High_risk"),
.names = "{col}_0.33")) %>%
mutate(Risk_Climate_Change_0.33 = # Correction for climate change
case_when(
Risk_Climate_Change<0.4 ~ "Low_risk",
TRUE ~ "High_risk"
)) %>%
mutate(All_boundaries_0.50 = case_when(
Risk_Land_system_change <= threshold_high & Risk_Freshwater_Use <= threshold_high & Risk_Biogeochemical_Flows <= threshold_high & Risk_Climate_Change <= threshold_CC_high ~ "Low_risk",
TRUE ~ "High_risk")) %>%
mutate(All_boundaries_0.33 = case_when(
Risk_Land_system_change <= threshold_low & Risk_Freshwater_Use <= threshold_low & Risk_Biogeochemical_Flows <= threshold_low & Risk_Climate_Change <= threshold_CC_low ~ "Low_risk",
TRUE ~ "High_risk")) %>%
select(Risk_Land_system_change_0.50:All_boundaries_0.33) # Selecting only desirable columns
n <- dim(df_table)[1] # total number of combinations
df_counts <- df_table %>% # Counts of eligible scenarios
apply(2,table) %>% # applying the table function to each column
data.frame() %>%
slice(2) %>%
as.numeric()
seq_0.5 <- c(1:4,9) # Order for 2.5
seq_0.33 <- c(5:8,10) # Order for 2.5
df_table_sum <- data.frame(
Boundary = boundaries,
Low_risk = df_counts[seq_0.33]/n*100,
Moderate_risk = df_counts[seq_0.5]/n*100)
df_recoded <- All_scen %>%
mutate(Likely = case_when(
Risk_Land_system_change <= threshold_high & Risk_Freshwater_Use <= threshold_high & Risk_Biogeochemical_Flows <= threshold_high & Risk_Climate_Change <= threshold_CC_high ~ "Risk<0.50",
TRUE ~ "Risk>0.50")) %>%
mutate(Likely = case_when(
Risk_Land_system_change <= threshold_low & Risk_Freshwater_Use <= threshold_low & Risk_Biogeochemical_Flows <= threshold_low & Risk_Climate_Change <= threshold_CC_low ~ "Risk<0.33",
TRUE ~ Likely)) %>%
select(Pop_levels:N_management,Likely,Ambition_all_boundaries,Risk_all_boundaries)
future::plan('multisession', workers = length(perc_cut))
df_recoded <- df_recoded %>%
filter(Likely!="Risk>0.50") %>% # Removing high risk scenarios
group_by(Likely) %>%  # Grouping by risk class
slice_min(order_by = Ambition_all_boundaries,prop = perc_cut[x], with_ties = FALSE) %>% # Ranking by ambition and selecting top 10%
ungroup()
df_recoded <- df_recoded %>%
filter(Likely!="Risk>0.50") %>% # Removing high risk scenarios
group_by(Likely) %>%  # Grouping by risk class
slice_min(order_by = Ambition_all_boundaries,prop = perc_cut[x], with_ties = FALSE) %>% # Ranking by ambition and selecting top 10%
ungroup()
x <- ""
N_scen <- df_recoded$Likely %>%
table() %>%
data.frame() %>%
rename(Risk_level=".") %>%
mutate(Percentage=Freq/sum(Freq)*100)
N_scen_likely <- sum(N_scen$Freq[1:2]) # Selecting only the scenarios that meet high and low threshold
df_table_plot <- df_table_sum %>%
pivot_longer(cols = Moderate_risk:Low_risk,names_to = "Risk_threshold",values_to = 'Percentage') %>%
mutate(Risk_threshold = case_when(
Risk_threshold == "Low_risk" ~ "Risk<0.33",
TRUE ~ "Risk<0.50"
)) #%>%
boundary_risk <- df_table_plot %>%
ggplot(aes(x = factor(Boundary,levels = rev(boundaries)), y = Percentage, fill= factor(Risk_threshold,levels = c("Risk<0.33","Risk<0.50")))) +
geom_bar(position = "dodge", stat = "identity", width = 0.6) +
scale_fill_manual(values = c(red_spectral,blue_spectral),
labels = c("Risk<0.33","Risk<0.50")) +
scale_y_continuous(expand = expansion(mult = c(0.1,0),add = c(0,0)),limits=c(-10,65))+
# geom_text(aes(y = 20, label = paste(Percentage, "%", sep=" ")),
#           hjust = 1, size = 11 * 0.8 / .pt, color = "grey30")+
geom_text(aes(y = -9, label = paste(
case_when(
Percentage<10 ~ sprintf(dp_string2,Percentage),# Number of significant figures depending on whether percentage is less or more than 10
TRUE ~ sprintf(dp_string1,Percentage)),
"%", sep=" ")),size = 3,
position = position_dodge(width = .6), color = "black") +
labs(x = "Planetary boundary", y = "Compliant combinations (%)") +
theme_light() +
coord_flip() +
theme(#legend.position  = c(0.225, -0.2),
#legend.direction = 'horizontal',
#plot.margin      = grid::unit(c(0.1,0.1,2.5,0.1), 'lines'),
legend.position = "bottom",
legend.title = element_blank(),
axis.title = element_text(size=11.5),
axis.text = element_text(size=10),
axis.ticks.y = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
df_likely <- df_recoded %>%
filter(Likely!="Risk>0.50") %>%  # Removing scenarios that don't meet any threshold
mutate_if(is.numeric,as.factor) %>%
mutate(n = case_when(
Likely=="Risk<0.33" ~ 1/N_scen$Freq[1],
Likely=="Risk<0.50" ~ 1/N_scen$Freq[2])) %>%
mutate(Feed_composition = case_when(
Feed_composition=="TREND" ~ "BAU",
TRUE ~ Feed_composition)) %>%
mutate(N_management = case_when( # Recoding N_management name to ensure consistency
N_management=="Current" ~ "Present",
TRUE ~ N_management))
df_best <- df_recoded %>%
filter(Likely=="Risk<0.33") %>%
mutate_if(is.numeric,as.factor)
# Creating summary table with count data for each intervention
Int_string <- df_likely %>%
select(Pop_levels:N_management) %>%
colnames()
Int_names <- c("Population","Animal calories","Plant calories","Waste",
"Crop yields","Feed conversion ratio","Feed composition","Water-use efficiency","Climate action","N & P management")
df_summary <- lapply(seq_along(Int_string), function (x) df_likely %>% # Looping across interventions
group_by(across(c("Likely",Int_string[x]))) %>%
count() %>%
magrittr::set_colnames(c("Risk_level","Int_level","Count")) %>%
add_column(Intervention=Int_names[x],.before = 1)) %>%
bind_rows() %>%
mutate(Int_level = case_when( # Harmonising level names by ambition
Int_level %in% c("8.5","LOW ASF","2300","Half","1.6","HIGH","HIGH GRAIN/LOW GRASS","0.3","200","+30% NUE,30% REC") ~ "Very High",
Int_level %in% c("8.9","REDUCED MEAT","2500","BAU_Low","1.45","ACCELERATED","INTENSIFIED","0.2","100","+20% NUE,+20% REC") ~ "High",
Int_level %in% c("9.7","BAU DIET","2700","Current","1.3","TREND","BAU","0.1","25","+10% NUE,+10% REC") ~ "Trend",
TRUE ~ "Low"))
df_summary_perc <- df_summary %>%  # Calculating a percentage column to enable stacked barplot
group_by(Intervention,Risk_level) %>%
mutate(pct= prop.table(Count) * 100)
summary_plot <- df_summary_perc %>%
ggplot() + aes(Risk_level, pct, fill=factor(Int_level,levels = c("Low","Trend","High","Very High"))) +
scale_fill_viridis(discrete = TRUE,begin = 0, end=1,option = "C",direction = -1,alpha = 0.85)+
geom_bar(stat="identity",width = 0.8) +
ylab("Level of mitigation ambition (%) ") +
xlab("Risk mitigation threshold") +
#geom_text(aes(label=paste0(sprintf("%1.1f", pct),"%")),
#          position=position_stack(vjust=0.5)) +
facet_wrap(~factor(Intervention, levels=Int_names),ncol = 2) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.title = element_text(size=11.5),
axis.text = element_text(size=10),
strip.text = element_text(size = 10),
axis.ticks.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
#theme_bw()
ggsave(paste0("Risk_level_summary_",penalty,"_",ambition_cutoff,"_",perc_cut[x],".tiff", sep = " ") , plot = summary_plot,
dpi = 1200, width = 100, height = 200, units = "mm",device ="tiff",
compression="lzw", type="cairo")
leg_p1 <- cowplot::get_legend(boundary_risk)
mod_p1 <- cowplot::plot_grid(boundary_risk + theme(legend.position = "none"), leg_p1, nrow = 2, rel_heights = c(1, 0.1))
combined_bars <- cowplot::plot_grid(labels = c("A", "B"),
boundary_risk,summary_plot,
nrow=2,ncol=1,
#scale = c(0.8,1),
rel_heights = c(0.5,1))
boundary_risk_mod <- cowplot::plot_grid(boundary_risk,NULL,nrow=2)
combined_unstretched <- cowplot::plot_grid(labels = c("A","B"),
boundary_risk_mod, summary_plot,
rel_widths = c(1.1,1),
ncol = 2,
align = "h",axis = "b"
)
ggsave(paste0("Fig_3_unstretched.png") , plot = combined_unstretched,
dpi = 1200,width = 7.35, height = 8.28, units = "in")
ggsave(paste0("Fig_3.tiff") , plot = combined_bars,
dpi = 1200, width = 100, height = 300, units = "mm",device ="tiff",
compression="lzw", type="cairo")
# Tidying up results dataframe
df_results <- df_summary_perc %>%
tidyr::pivot_wider(names_from = Int_level,values_from=c(Count,pct)) %>%
rename(Risk_class = Risk_level)
df_summary_perc
df_likely_mod <- df_likely %>%
mutate(Carbon_price = case_when(
Carbon_price %in% c(0,25,100) ~ "L/T/H",
#Carbon_price %in% c(100) ~ "H",
TRUE ~ "VH")) %>%
mutate(WUEinc = case_when(
WUEinc %in% c(0,0.1) ~ "L/T",
WUEinc %in% c(0.2) ~ "H",
TRUE ~ "VH")) %>%
mutate(Feed_efficiency = case_when(
Feed_efficiency %in% c("STAGNANT","TREND") ~ "L/T",
Feed_efficiency %in% c("ACCELERATED") ~ "H",
TRUE ~ "VH")) %>%
mutate(Feed_composition = case_when(
Feed_composition %in% c("HIGH GRAIN/LOW GRASS") ~ "VH",
Feed_composition %in% c("BAU") ~ "H",
TRUE ~ "L/T")) %>%
mutate(Yield_levels = case_when(
Yield_levels %in% c(1.15,1.3) ~ "L/T",
Yield_levels %in% c(1.45) ~ "H",
TRUE ~ "VH")) %>%
mutate(Waste = case_when(
Waste %in% c("BAU_Low") ~ "H",
Waste %in% c("BAU_High","Current") ~ "L/T",
TRUE ~ "VH")) %>%
mutate(Plant_kcal = case_when(
Plant_kcal %in% c(2700,2900) ~ "L/T",
Plant_kcal %in% c(2500) ~ "H",
TRUE ~ "VH")) %>%
mutate(Diet = case_when(
#Diet %in% c("BAU DIET") ~ "T",
Diet %in% c("REDUCED MEAT") ~ "H",
TRUE ~ "VH")) %>%
mutate(Pop_levels = case_when(
#Pop_levels %in% c(10.6) ~ "L",
Pop_levels %in% c(9.7,8.9) ~ "T/H",
#Pop_levels %in% c(8.9) ~ "H",
TRUE ~ "VH")) %>%
filter(N_management=="+30% NUE,30% REC") %>%
mutate(N_management="VH") %>%
mutate(N_mod = case_when(
Likely=="Risk<0.50" ~ 1,
TRUE ~ scaling_factor)) # If scaling factor > 1 then low risk scenarios are scaled
if(perc_cut[x]<1) {
df_likely_mod <- df_likely_mod %>%
mutate(WUEinc = case_when(
WUEinc %in% c("H","VH") ~ "H/VH",
TRUE ~ WUEinc))
}
if(perc_cut[x]==0.5) {
df_likely_mod <- df_likely_mod %>%
mutate(Feed_composition = case_when(
Feed_composition %in% c("H","VH") ~ "H/VH",
TRUE ~ Feed_composition))
}
levels1 <- c("L","L/T","T","L/T/H","T/H","H","VH","H/VH") # Most common level combination
levels2 <- c("VH","T/H")
Int_names_mod <- Int_names
#Int_names_mod[Int_names=="Animal calories"] = "Animal\ncalories"
#Int_names_mod[Int_names=="Plant calories"] = "Plant\ncalories"
#Int_names_mod[Int_names=="Feed efficiency"] = "Feed\nefficiency"
#Int_names_mod[Int_names=="Feed composition"] = "Feed\ncomposition"
Int_names_mod[Int_names=="Water-use efficiency"] = "Water-use\nefficiency"
Int_names_mod[Int_names=="Climate change action"] = "Climate change\naction"
p <- ggplot(df_likely_mod,
aes(y = N_mod,
#y = n*100,
#y=1,
axis10 = Pop_levels,
axis9 = Diet,
axis8 = Plant_kcal,
axis7 = Waste,
axis6 = Yield_levels,
axis5 = Feed_efficiency,
axis4 = Feed_composition,
axis3 = WUEinc,
axis2 = Carbon_price,
axis1 = factor(N_management,levels=levels1))) +
geom_alluvium(aes(fill = Likely),
width = 0, knot.pos = 0, reverse = FALSE) +
geom_stratum(alpha = 0.95,width = 1/4, reverse = FALSE) +
geom_text(stat = "stratum", aes(label = after_stat(stratum)),
reverse = FALSE, size = 3.5) +
scale_x_continuous(breaks = 1:10, labels = rev(Int_names_mod)) +
#scale_fill_brewer(type = "qual", palette = "Set1",
#                  labels = c("Risk<0.33" = paste0("Risk<0.33\n(n = ",N_scen$Freq[1],"*)"), "Risk<0.50" = paste0("Risk<0.50\n(n = ",N_scen$Freq[2],")"))) +#+
scale_fill_manual(values = c(red_spectral,blue_spectral),
labels = c("Risk<0.33" = paste0("Risk<0.33\n(n = ",N_scen$Freq[1],"*)"), "Risk<0.50" = paste0("Risk<0.50\n(n = ",N_scen$Freq[2],")")))+
labs(y = "Scenario count") + #x = "Interventions",
coord_flip() +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
combined <- cowplot::plot_grid(labels = "AUTO",
summary_plot,p,
nrow=1,ncol=2,
rel_widths = rev(c(1,0.75)))
ggsave(paste0("Combined_",penalty,"SF_",scaling_factor,"_",ambition_cutoff,"_",perc_cut[x],".pdf", sep = " ") , plot = combined,
dpi = 600, width = 7.60, height = 7.59, units = "in",device ="pdf")
# Tidying up results dataframe
df_results <- df_summary_perc %>%
tidyr::pivot_wider(names_from = Int_level,values_from=c(Count,pct)) %>%
rename(Risk_class = Risk_level)
#openxlsx::write.xlsx(df_results, "Intervention_ambition_by_risk_class.xlsx", sheetName = paste0("Ambition cut-off",as.character(perc_cut[x]*100)," %"), append=TRUE)
write.csv(df_results,paste0("Intervention_ambition_by_risk_class_","Ambition_cut-off_",perc_cut[x]," %",".csv"))
### 1. Loading packages and functions and specifying working directory and parameters
rm(list = ls())
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,viridis,future.apply,data.table)
PC <- 'denethor'
n <- 10000
penalty <- 'no'
ambition_cutoff <- 'no'
results_date <- '23-02-07'
if(PC=='work_laptop') {
setwd("C:/Users/Hadj/OneDrive - Deakin University/Michalis_Brett/Future_food_systems_review/")
} else if (PC =='analytix') {
setwd("M:/Current-Users/Michalis-Hadjikakou/Food_Meta_Analysis_Enayat/Notebook/")
} else {
setwd("//school-les-m.shares.deakin.edu.au/school-les-m/Planet-A/Food-Systems/Meta_analysis/GFSS-MM/Outputs/Pareto_analysis+plots/")
}
# If there is a penalty read the penalty file
if (penalty=='yes') {
All_scen <- fread(paste0("All_merged_scenarios_penalty_",results_date,".csv"))
}else{
All_scen <- fread(paste0("All_merged_scenarios_",results_date,".csv"))
}
# Risk cut-off parameters
threshold_high <- 0.5
threshold_CC_high <- 0.5
threshold_low <- 1/3
threshold_CC_low <- 0.40
perc_cut  <- c(1,0.5,0.25,0.1) # Choice of ambition percentile to consider
scaling_factor <- 10 # scales the low risk scenarios to ensure they are visible
# Plotting parameters
red_spectral <- RColorBrewer::brewer.pal(n = 11, name = "Spectral")[1]
blue_spectral <- RColorBrewer::brewer.pal(n = 11, name = "Spectral")[10]
boundaries <- c("Land-system change","Climate change","Freshwater use","Biogeochemical flows","All boundaries")
dp1 <- 1 # Number of decimal places
dp_string1 <- paste0("%0.",dp1,"f")
dp2 <- 2 # Number of decimal places
dp_string2 <- paste0("%0.",dp2,"f")
sel_cols <- c("Risk_Land_system_change","Risk_Climate_Change","Risk_Freshwater_Use","Risk_Biogeochemical_Flows")
df_table <- All_scen %>%
mutate(across(all_of(sel_cols), # Combinations that satisfy 0.5 risk for each boundary
~ case_when(
.<0.5 ~ "Low_risk",
TRUE ~ "High_risk"),
.names = "{col}_0.50")) %>%
mutate(across(all_of(sel_cols), # Combinations that satisfy 0.33 risk for each boundary
~ case_when(
.<1/3 ~ "Low_risk",
TRUE ~ "High_risk"),
.names = "{col}_0.33")) %>%
mutate(Risk_Climate_Change_0.33 = # Correction for climate change
case_when(
Risk_Climate_Change<0.4 ~ "Low_risk",
TRUE ~ "High_risk"
)) %>%
mutate(All_boundaries_0.50 = case_when(
Risk_Land_system_change <= threshold_high & Risk_Freshwater_Use <= threshold_high & Risk_Biogeochemical_Flows <= threshold_high & Risk_Climate_Change <= threshold_CC_high ~ "Low_risk",
TRUE ~ "High_risk")) %>%
mutate(All_boundaries_0.33 = case_when(
Risk_Land_system_change <= threshold_low & Risk_Freshwater_Use <= threshold_low & Risk_Biogeochemical_Flows <= threshold_low & Risk_Climate_Change <= threshold_CC_low ~ "Low_risk",
TRUE ~ "High_risk")) %>%
select(Risk_Land_system_change_0.50:All_boundaries_0.33) # Selecting only desirable columns
n <- dim(df_table)[1] # total number of combinations
df_counts <- df_table %>% # Counts of eligible scenarios
apply(2,table) %>% # applying the table function to each column
data.frame() %>%
slice(2) %>%
as.numeric()
seq_0.5 <- c(1:4,9) # Order for 2.5
seq_0.33 <- c(5:8,10) # Order for 2.5
df_table_sum <- data.frame(
Boundary = boundaries,
Low_risk = df_counts[seq_0.33]/n*100,
Moderate_risk = df_counts[seq_0.5]/n*100)
df_recoded <- All_scen %>%
mutate(Likely = case_when(
Risk_Land_system_change <= threshold_high & Risk_Freshwater_Use <= threshold_high & Risk_Biogeochemical_Flows <= threshold_high & Risk_Climate_Change <= threshold_CC_high ~ "Risk<0.50",
TRUE ~ "Risk>0.50")) %>%
mutate(Likely = case_when(
Risk_Land_system_change <= threshold_low & Risk_Freshwater_Use <= threshold_low & Risk_Biogeochemical_Flows <= threshold_low & Risk_Climate_Change <= threshold_CC_low ~ "Risk<0.33",
TRUE ~ Likely)) %>%
select(Pop_levels:N_management,Likely,Ambition_all_boundaries,Risk_all_boundaries)
if (ambition_cutoff=='yes'){
df_recoded <- df_recoded %>%
filter(Likely!="Risk>0.50") %>% # Removing high risk scenarios
group_by(Likely) %>%  # Grouping by risk class
slice_min(order_by = Ambition_all_boundaries,prop = perc_cut[x], with_ties = FALSE) %>% # Ranking by ambition and selecting top 10%
ungroup()
#arrange(Ambition_all_boundaries,.by_group = TRUE) %>%
#slice(1:10)
}else{
x <- ""
}
N_scen <- df_recoded$Likely %>%
table() %>%
data.frame() %>%
rename(Risk_level=".") %>%
mutate(Percentage=Freq/sum(Freq)*100)
N_scen_likely <- sum(N_scen$Freq[1:2]) # Selecting only the scenarios that meet high and low threshold
df_table_plot <- df_table_sum %>%
pivot_longer(cols = Moderate_risk:Low_risk,names_to = "Risk_threshold",values_to = 'Percentage') %>%
mutate(Risk_threshold = case_when(
Risk_threshold == "Low_risk" ~ "Risk<0.33",
TRUE ~ "Risk<0.50"
)) #%>%
boundary_risk <- df_table_plot %>%
ggplot(aes(x = factor(Boundary,levels = rev(boundaries)), y = Percentage, fill= factor(Risk_threshold,levels = c("Risk<0.33","Risk<0.50")))) +
geom_bar(position = "dodge", stat = "identity", width = 0.6) +
scale_fill_manual(values = c(red_spectral,blue_spectral),
labels = c("Risk<0.33","Risk<0.50")) +
scale_y_continuous(expand = expansion(mult = c(0.1,0),add = c(0,0)),limits=c(-10,65))+
# geom_text(aes(y = 20, label = paste(Percentage, "%", sep=" ")),
#           hjust = 1, size = 11 * 0.8 / .pt, color = "grey30")+
geom_text(aes(y = -9, label = paste(
case_when(
Percentage<10 ~ sprintf(dp_string2,Percentage),# Number of significant figures depending on whether percentage is less or more than 10
TRUE ~ sprintf(dp_string1,Percentage)),
"%", sep=" ")),size = 3,
position = position_dodge(width = .6), color = "black") +
labs(x = "Planetary boundary", y = "Compliant combinations (%)") +
theme_light() +
coord_flip() +
theme(#legend.position  = c(0.225, -0.2),
#legend.direction = 'horizontal',
#plot.margin      = grid::unit(c(0.1,0.1,2.5,0.1), 'lines'),
legend.position = "bottom",
legend.title = element_blank(),
axis.title = element_text(size=11.5),
axis.text = element_text(size=10),
axis.ticks.y = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
df_likely <- df_recoded %>%
filter(Likely!="Risk>0.50") %>%  # Removing scenarios that don't meet any threshold
mutate_if(is.numeric,as.factor) %>%
mutate(n = case_when(
Likely=="Risk<0.33" ~ 1/N_scen$Freq[1],
Likely=="Risk<0.50" ~ 1/N_scen$Freq[2])) %>%
mutate(Feed_composition = case_when(
Feed_composition=="TREND" ~ "BAU",
TRUE ~ Feed_composition)) %>%
mutate(N_management = case_when( # Recoding N_management name to ensure consistency
N_management=="Current" ~ "Present",
TRUE ~ N_management))
df_best <- df_recoded %>%
filter(Likely=="Risk<0.33") %>%
mutate_if(is.numeric,as.factor)
# Creating summary table with count data for each intervention
Int_string <- df_likely %>%
select(Pop_levels:N_management) %>%
colnames()
Int_names <- c("Population","Animal calories","Plant calories","Waste",
"Crop yields","Feed conversion ratio","Feed composition","Water-use efficiency","Climate action","N & P management")
df_summary <- lapply(seq_along(Int_string), function (x) df_likely %>% # Looping across interventions
group_by(across(c("Likely",Int_string[x]))) %>%
count() %>%
magrittr::set_colnames(c("Risk_level","Int_level","Count")) %>%
add_column(Intervention=Int_names[x],.before = 1)) %>%
bind_rows() %>%
mutate(Int_level = case_when( # Harmonising level names by ambition
Int_level %in% c("8.5","LOW ASF","2300","Half","1.6","HIGH","HIGH GRAIN/LOW GRASS","0.3","200","+30% NUE,30% REC") ~ "Very High",
Int_level %in% c("8.9","REDUCED MEAT","2500","BAU_Low","1.45","ACCELERATED","INTENSIFIED","0.2","100","+20% NUE,+20% REC") ~ "High",
Int_level %in% c("9.7","BAU DIET","2700","Current","1.3","TREND","BAU","0.1","25","+10% NUE,+10% REC") ~ "Trend",
TRUE ~ "Low"))
df_summary_perc <- df_summary %>%  # Calculating a percentage column to enable stacked barplot
group_by(Intervention,Risk_level) %>%
mutate(pct= prop.table(Count) * 100)
summary_plot <- df_summary_perc %>%
ggplot() + aes(Risk_level, pct, fill=factor(Int_level,levels = c("Low","Trend","High","Very High"))) +
scale_fill_viridis(discrete = TRUE,begin = 0, end=1,option = "C",direction = -1,alpha = 0.85)+
geom_bar(stat="identity",width = 0.8) +
ylab("Level of mitigation ambition (%) ") +
xlab("Risk mitigation threshold") +
#geom_text(aes(label=paste0(sprintf("%1.1f", pct),"%")),
#          position=position_stack(vjust=0.5)) +
facet_wrap(~factor(Intervention, levels=Int_names),ncol = 2) +
theme_bw() +
theme(legend.position = "bottom",
legend.title = element_blank(),
axis.title = element_text(size=11.5),
axis.text = element_text(size=10),
strip.text = element_text(size = 10),
axis.ticks.x = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank())
summary_plot
boundary_risk
